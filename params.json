{
  "name": "dockerized-development-environment",
  "tagline": "GoCD, ELK Stack, Nexus 3, HAProxy and Nginx in a Docker Compose script for fast development environment setup",
  "body": "#dockerized-development-environment\r\n\r\nA simple and fast way to create a development environment with GoCD, ELK Stack, Nexus 3, HAProxy and Nginx in a Docker Compose script for fast setup.\r\n\r\nAt the end of this Readme you will have:\r\n- A GoCD Server with 1 GoCD Agent and 2 pipelines ready to build the dropwizard-seed project\r\n- A Nexus 3 repository setup with docker and maven repositories\r\n- An ELK Stack, which captures all logs from the dropwizard-seed project (if started as shown in the guide)\r\n- A HAProxy container for proxying your containers\r\n- A Nginx instance for serving static content (the default HAProxy page)\r\n\r\n# Prerequisites\r\n- Docker\r\n- Oracle VM VirtualBox Manager (if running on Windows or OSX)\r\n\r\n# Getting started for Linux\r\n\r\n\r\n### Clone the repository\r\n  \r\n  ```\r\n  $ git clone https://github.com/eciuca/dockerized-development-environment.git\r\n  ```\r\n\r\n### Run the containers\r\n\r\nGo into the dev-env-setup directory and run the linux configuration\r\n  ```\r\n  $ cd dev-env-setup\r\n  $ docker-compose -f linux/docker-compose.yml up -d\r\n  ```\r\nIf you run `docker ps` you should see something like this:\r\n```\r\nCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                                                                                                                                NAMES\r\n2444b47aa2bb        eciuca/gocd-agent-jdk8-maven3   \"/sbin/my_init\"          8 minutes ago       Up 8 minutes                                                                                                                                             linux_gocd-agent-updated_1\r\n643257cce4c4        nginx                           \"nginx -g 'daemon off\"   9 minutes ago       Up 8 minutes        443/tcp, 0.0.0.0:3334->80/tcp                                                                                                        linux_nginx_1\r\nea83591431de        sonatype/nexus3                 \"/bin/sh -c 'bin/nexu\"   9 minutes ago       Up 9 minutes        0.0.0.0:8081->8081/tcp, 0.0.0.0:8444->8444/tcp                                                                                       linux_nexus_1\r\na7b40c01941e        gocd/gocd-server                \"/sbin/my_init\"          9 minutes ago       Up 9 minutes        0.0.0.0:8153->8153/tcp, 8154/tcp                                                                                                     linux_gocd-server_1\r\ne3291d38ece5        sebp/elk                        \"/usr/local/bin/start\"   9 minutes ago       Up 9 minutes        0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:5601->5601/tcp, 0.0.0.0:9200->9200/tcp, 9300/tcp, 0.0.0.0:12201->12201/udp   linux_elk_1\r\nf577c13749d6        million12/haproxy               \"/bootstrap.sh\"          9 minutes ago       Up 9 minutes        0.0.0.0:80->80/tcp, 443/tcp                                                                                                          linux_haproxy_1\r\n```\r\n\r\nWait some time until all the applications are initialized.\r\n\r\n### Access the default page\r\n\r\nGo to <a target=\"_blank\" href=\"http://localhost/home\">http://localhost/home</a> (HAProxy is set to listen on port 80, if you want you can change it from docker-compose.yml)\r\n\r\n### Configure Nexus\r\n\r\n1. Click on the Nexus hyperlink and log in as administrator using the following credentials:\r\n  ```\r\n  username: admin\r\n  password: admin123\r\n  ```\r\n\r\n2. Go to Server administration and configuration> Repositories \r\n\r\n3. Create docker-internal repository:\r\n  - Click on the <b>Create repository</b> button \r\n  - Create a new docker (hosted) repository named <b>docker-internal</b>\r\n  - Tick the HTTP box from Repository Connectors and set the port to <b>8444</b> (same as in the file `go/agent/settings.xml`)\r\n  - Select the <b>default</b> option for the blob store and \r\n  - Click <b>Create repository</b>\r\n\r\n4. Create docker-hub repository\r\n  - Click on the <b>Create repository</b> button\r\n  - Create a new docker (proxy) repository named <b>docker-hub</b>\r\n  - Tick the <b>Allow clients to use the V1 API to interact with this Repository.</b> checkbox under Docker Registry API Support > Enable Docker V1 API\r\n  - Put `https://registry-1.docker.io` in Proxy > Remote storage\r\n  - Select the <b>default</b> option for the blob store\r\n  - Click <b>Create repository</b>\r\n\r\n5. Create docker-public group repository\r\n  - Click on the <b>Create repository</b> button\r\n  - Create a new docker (group) repository named <b>docker-public</b>\r\n  - Tick the <b>Allow clients to use the V1 API to interact with this Repository.</b> checkbox under Docker Registry API Support > Enable Docker V1 API\r\n  - Select the <b>default</b> option for the blob store \r\n  - Add docker-hub and docker-internal in the <b>Members</b> list\r\n  - Click <b>Create repository</b>.\r\n\r\n### Configure Go Server and Agent\r\n\r\n1. Access the server\r\n  - Go to <a target=\"_blank\" href=\"http://localhost\">http://localhost</a>\r\n  - Click the <b>Go</b> hyperlink (<a target=\"_blank\" href=\"http://localhost/go\">http://localhost/go</a>)\r\n\r\n2. Apply the configuration\r\n  - Go to `Admin > Config XML`\r\n  - Click the <b>Edit</b> button \r\n  - Paste the contents of the file `go/server/partial-cruise-config.xml` between the <b>server</b> and <b>agent</b> XML elements (the gocd-agent from the docker-compose.yml should have been already discovered).\r\n  - Add an `<physical>` element under `cruise\\environments\\environment\\agents` (see commented example) with the uuid of the discovered go agent from `cruise\\agents\\agent`\r\n  - Click <b>Save</b>\r\n\r\nIf you go to the <b>Pipelines</b> view you will see the <b>Parent</b> and <b>Dropwizard</b> pipelines under the <b>eciuca</b> group.\r\n\r\n### Run a dropwizard-seed image\r\n\r\n1. After the <b>gocd-agent finishes successfully</b> the build run the following command to run the newly build docker image\r\n```\r\n$ docker run -p 8888:8888 --log-driver=gelf --log-opt gelf-address=udp://$(docker inspect --format '{{ .NetworkSettings.Networks.linux_default.IPAddress }}' linux_elk_1):12201 --log-opt tag=\"{{.ImageName}}/{{.Name}}/{{.ID}}\" localhost:8444/com.github.eciuca/dropwizard-seed-local\r\n```\r\n\r\n2. Go to <a target=\"_blank\" href=\"http://localhost:8888/hello-world/user1\">http://localhost:8888/hello-world/user1</a> and you should see the following message: `Hello, user1!`\r\n\r\n### Access ElasticSearch API\r\n\r\nIf you make this http request to the elasticsearch node you should see the logs there. Here's the request (you can access from the HAProxy default page): <a target=\"_blank\" href=\"http://localhost/elasticsearch/_search?pretty\">http://localhost/elasticsearch/_search?pretty</a>\r\n\r\n### Configure Kibana\r\n\r\n1. Access the application:\r\n  - Go to <a target=\"_blank\" href=\"http://localhost/app/kibana\">http://localhost/app/kibana</a> \r\n  - You will be redirected to the <b>Configure an index pattern</b> page. \r\n\r\n2. Configure an index pattern\r\n  - In the index name or patter put <b>gelf_logs</b>\r\n  - After the <b>Time-field name</b> refreshes select <b>@timestamp</b> from the dropdown\r\n  - Click <b>Create</b>.\r\n\r\n3. If you click now on the <b>Discover</b> navigation button you will be able to see same logs that you have seen when you accessed ElasticSearch earlier\r\n\r\n# Getting started for windows\r\n\r\n1. Run prepare.bat\r\n2. Open Oracle VM VirtualBox Manager. Right click your docker machine and map a host port (e.g. 8182) to the internal port 80 (the port to which nginx is listening)\r\n3. docker-compose -f windows-or-osx/docker-compose.yml up (it will start the containers on your active docker machine) - for linux just use the -f linux/docker-compose.yml\r\n4. After the initialization is finished (first time will take about 10 mins for jenkins and 2 mins for nexus maybe because they are downloading and initializing stuff in the specified volumes) you will be able to access Jenkins and Nexus at http://localhost:8182/jenkins and http://localhost:8182/nexus and similar for the others (http://localhost:8182/<app>)\r\n\r\nHave fun! :D\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}